Config Driven UI
- A config-driven UI (User Interface) refers to a design approach where the UI is generated dynamically based on a predefined configuration. This configuration is typically structured in a format such as JSON, XML, or YAML and dictates various aspects of the UI such as layout, components, styles, and behaviors.

Two types of export/import
- Default Export/import
		- export default Component;
		- import Component from "path";

-Named Export/import
		- export const Component;
		- import {Component} from "path";

//React Hooks
- Normal js utility functions

// useState()
 => used to create superpowerful state variable in react
 => Whenever a state variable changes/updates, react will re-render the component
 => Do not use useState hook inside the conditional statements/loops/functions or outside of the component

// How React works
- Reconciliation Algorithm(ReactFiber)
- Uses virtual DOM => is a representation of an actual DOM
- React Component is an object which represents a virtual DOM

// useEffect
=> This hook will be called as soon as the component is rendered completely
=> Two arguments -> callback function and dependency array(optional)
=> If no dependency array -> useEffect is called on every render of the component
=> If dependency array is empty = [] -> useEffect is called on initial render only (just once when the component is rendered for the first time)
=> If dependency array is not empty like [btnName], useEffect will be called evertime btnName updates/changes
=> useEffect(() => {
    // Do setup here (API calls, subscriptions, etc.)

    // Cleanup function
    return () => {
      // Perform cleanup here (unsubscribe, clear timers, cancel requests, etc.)
    };
  }, [/* dependencies */]);

=> The component is re-rendered everytime whenever a state variable changes
=> Whenever state variables update, react triggers a reconciliation cycle(re-renders the component)

=> rafce -> creates a boilerplate component

# Two types of routing in web apps
=> Client side routing
=> Server side routing

# For eposide 7 revision: view last 10 minutes of the video

# Never update state variables directly

# componentDidMount => called when the render of the component is completed/ mounted successfully => used for api call
=> componentDidMount is another lifecycle method in React for class components. It's executed after the component is mounted (i.e., added to the DOM), making it the perfect place to initiate API calls, set up subscriptions, or do any setup that requires a DOM node. This method is called only once in the lifecycle of a component, right after the initial render, making it analogous to the useEffect hook in functional components with an empty dependency array ([]).

# componentDidUpdate
=> Called when the state is updated with new data
=> The componentDidUpdate method is called immediately after updating occurs. This method is not called for the initial render. It provides an opportunity to operate on the DOM when the component has been updated.

# componentWillUnmount
=> The componentWillUnmount method is called just before the component is unmounted and destroyed. This method is a good place to perform any necessary cleanup, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount.

# Custom Hooks

# Chunking
# Code Splitting
# Dynamic Bundling
# Lazy Loading
# On demand loading
# Dynamic import

# Ways of styling apps
=> styled components
=> Material UI
=> Tailwind css
=> React Bootstrap
=> Ant design (React UI)
=> Chakra UI (React UI)

# Higher component
=> Is a component that takes a component as an argument and returns a component

# Controlled and Uncontrolled component
# Lifting the state up
# Props drilling